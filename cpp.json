{
	"logx": {
        "prefix": "logx",
        "body": [
            "#ifdef __LOCAL",
            "#define _GLIBCXX_DEBUG",
            "#endif",
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "//#include <atcoder/all>",
            "//using namespace atcoder;",
            "",
            "/*---------macro---------*/",
            "#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
            "#define rep2(i, s, n) for (int i = s; i < (int)(n); i++)",
            "#define unless(x) if(!(x))",
            "#define until(x) while(!(x))",
            "#define ALL(a) a.begin(),a.end()",
            "#define RALL(a) a.rbegin(),a.rend()",
            "#define mybit(i,j) (((i)>>(j))&1)",
            "",
            "/*---------type/const---------*/",
            "constexpr int MOD=1000000007;",
            "//constexpr int MDO=998244353;",
            "constexpr double EPS=1e-8; //適宜変える",
            "typedef long long ll;",
            "typedef unsigned long long ull;",
            "typedef std::string::const_iterator state; //構文解析",
            "constexpr int dx[4]={1,0,-1,0};",
            "constexpr int dy[4]={0,1,0,-1};",
            "constexpr char newl='\\n';",
            "struct{",
            "    constexpr operator int(){return -int(1e9)-10;}",
            "    constexpr operator ll(){return -ll(1e18)-10;}",
            "}neginf;",
            "struct{",
            "    constexpr operator int(){return int(1e9)+10;}",
            "    constexpr operator ll(){return ll(1e18)+10;}",
            "    constexpr auto operator -(){return neginf;}",
            "}inf;",
            "",
            "/*---------debug---------*/",
            "#ifdef __LOCAL",
            "#include <logx/Library_cp/debug.hpp>",
            "#else",
            "#define dbg(...) ;",
            "#define dbgnewl ;",
            "#define prt(x) ;",
            "#define _prt(x) ;",
            "#endif",
            "",
            "/*---------function---------*/",
            "template<typename T> T max(const std::vector<T> &a){T ans=a[0];for(T elem:a){ans=max(ans,elem);}return ans;}",
            "template<typename T> T min(const std::vector<T> &a){T ans=a[0];for(T elem:a){ans=min(ans,elem);}return ans;}",
            "template<typename T,typename U> bool chmin(T &a,const U b){if(a>b){a=b;return true;}return false;}",
            "template<typename T,typename U> bool chmax(T &a,const U b){if(a<b){a=b;return true;}return false;}",
            "bool valid(int i,int j,int h,int w){return (i>=0 && j>=0 && i<h && j<w);}",
            "template<class T,class U>T expm(T x,U y,const ll mod=MOD){T res=1;while(y){if(y&1)(res*=x)%=mod;(x*=x)%=mod;y>>=1;}return res;}",
            "template<class T,class U>T exp(T x,U y){T res=1;while(y){if(y&1)res*=x;x*=x;y>>=1;}return res;}",
            "",
            "",
            "",
            "int main(){",
            "    std::ios::sync_with_stdio(false);",
            "    std::cin.tie(nullptr);",
            "    std::cout << std::fixed << std::setprecision(10);",
            "/*------------------------------------*/",
            "    ",
            "}",
        ],
        "description": ""
    },

	"mitanai": {
        "prefix": "mitanai",
        "body": [
            "#include<bits/stdc++.h>",
            "#include<cassert>",
            "//#include<ext/pb_ds/assoc_container.hpp>",
            "//#include<ext/pb_ds/tree_policy.hpp>",
            "//#include<ext/pb_ds/tag_and_trait.hpp>",
            "#define overload4(_1, _2, _3, _4, name, ...) name",
            "#define rep1(i, n) for (ll i = 0; i < ll(n); ++i)",
            "#define rep2(i, s, n) for (ll i = ll(s); i < ll(n); ++i)",
            "#define rep3(i, s, n, d) for(ll i = ll(s); i < ll(n); i+=d)",
            "#define rep(...) overload4(__VA_ARGS__,rep3,rep2,rep1)(__VA_ARGS__)",
            "#define rrep1(i, n) for (ll i = ll(n)-1; i >= 0; i--)",
            "#define rrep2(i, n, t) for (ll i = ll(n)-1; i >= (ll)t; i--)",
            "#define rrep3(i, n, t, d) for (ll i = ll(n)-1; i >= (ll)t; i-=d)",
            "#define rrep(...) overload4(__VA_ARGS__,rrep3,rrep2,rrep1)(__VA_ARGS__)",
            "#define all(a) a.begin(),a.end()",
            "#define rall(a) a.rbegin(),a.rend()",
            "#define SUM(a) accumulate(all(a),0LL)",
            "#define MIN(a) *min_element(all(a))",
            "#define MAX(a) *max_element(all(a))",
            "#define SORT(a) sort(all(a));",
            "#define REV(a) reverse(all(a));",
            "#define SZ(a) int(a.size())",
            "#define popcount(x) __builtin_popcountll(x)",
            "#define pf push_front",
            "#define pb push_back",
            "#define ef emplace_front",
            "#define eb emplace_back",
            "#define ppf pop_front",
            "#define ppb pop_back",
            "#ifdef __LOCAL",
            "#define debug(...) { cout << #__VA_ARGS__; cout << \": \"; print(__VA_ARGS__); cout << flush; }",
            "#else",
            "#define debug(...) void(0);",
            "#endif",
            "#define INT(...) int __VA_ARGS__;scan(__VA_ARGS__)",
            "#define LL(...) ll __VA_ARGS__;scan(__VA_ARGS__)",
            "#define STR(...) string __VA_ARGS__;scan(__VA_ARGS__)",
            "#define CHR(...) char __VA_ARGS__;scan(__VA_ARGS__)",
            "#define DBL(...) double __VA_ARGS__;scan(__VA_ARGS__)",
            "#define LD(...) ld __VA_ARGS__;scan(__VA_ARGS__)",
            "using namespace std;",
            "//using namespace __gnu_pbds;",
            "using ll = long long;",
            "using ld = long double;",
            "using P = pair<int, int>;",
            "using LP = pair<ll, ll>;",
            "using vi = vector<int>;",
            "using vvi = vector<vi>;",
            "using vvvi = vector<vvi>;",
            "using vl = vector<ll>;",
            "using vvl = vector<vl>;",
            "using vvvl = vector<vvl>;",
            "using vd = vector<double>;",
            "using vvd = vector<vd>;",
            "using vs = vector<string>;",
            "using vc = vector<char>;",
            "using vvc = vector<vc>;",
            "using vb = vector<bool>;",
            "using vvb = vector<vb>;",
            "using vp = vector<P>;",
            "using vvp = vector<vp>;",
            "",
            "//template<class T>",
            "//using PQ = priority_queue <pair<T, int>, vector<pair < T, int>>, greater <pair<T, int>>>;",
            "",
            "template<class T>",
            "using PQ = priority_queue <T, vector<T>, greater <T>>;",
            "",
            "template<class S, class T>",
            "istream &operator>>(istream &is, pair <S, T> &p) { return is >> p.first >> p.second; }",
            "",
            "template<class S, class T>",
            "ostream &operator<<(ostream &os, const pair <S, T> &p) { return os << '{' << p.first << \", \" << p.second << '}'; }",
            "",
            "template<class S, class T, class U>",
            "istream &operator>>(istream &is, tuple <S, T, U> &t) { return is >> get<0>(t) >> get<1>(t) >> get<2>(t); }",
            "",
            "template<class S, class T, class U>",
            "ostream &operator<<(ostream &os, const tuple <S, T, U> &t) {",
            "    return os << '{' << get<0>(t) << \", \" << get<1>(t) << \", \" << get<2>(t) << '}';",
            "}",
            "",
            "template<class T>",
            "istream &operator>>(istream &is, vector <T> &v) {",
            "    for (T &t: v) { is >> t; }",
            "    return is;",
            "}",
            "",
            "template<class T>",
            "ostream &operator<<(ostream &os, const vector <T> &v) {",
            "    os << '[';",
            "    rep(i, v.size()) os << v[i] << (i == int(v.size() - 1) ? \"\" : \", \");",
            "    return os << ']';",
            "}",
            "",
            "template<class T>",
            "ostream &operator<<(ostream &os, const deque <T> &v) {",
            "    os << '[';",
            "    rep(i, v.size()) os << v[i] << (i == int(v.size() - 1) ? \"\" : \", \");",
            "    return os << ']';",
            "}",
            "",
            "template<class T>",
            "ostream &operator<<(ostream &os, const set <T> &st) {",
            "    os << '{';",
            "    auto it = st.begin();",
            "    while (it != st.end()) {",
            "        os << (it == st.begin() ? \"\" : \", \") << *it;",
            "        it++;",
            "    }",
            "    return os << '}';",
            "}",
            "",
            "template<class T>",
            "ostream &operator<<(ostream &os, const multiset <T> &st) {",
            "    os << '{';",
            "    auto it = st.begin();",
            "    while (it != st.end()) {",
            "        os << (it == st.begin() ? \"\" : \", \") << *it;",
            "        it++;",
            "    }",
            "    return os << '}';",
            "}",
            "",
            "template<class T>",
            "void vecout(const vector <T> &v, char div = '\\n') {",
            "    rep(i, v.size()) cout << v[i] << (i == int(v.size() - 1) ? '\\n' : div);",
            "}",
            "",
            "template<class T>",
            "bool chmin(T &a, T b) {",
            "    if (a > b) {",
            "        a = b;",
            "        return true;",
            "    }",
            "    return false;",
            "}",
            "",
            "template<class T>",
            "bool chmax(T &a, T b) {",
            "    if (a < b) {",
            "        a = b;",
            "        return true;",
            "    }",
            "    return false;",
            "}",
            "",
            "void scan() {}",
            "",
            "template<class Head, class... Tail>",
            "void scan(Head &head, Tail &... tail) {",
            "    cin >> head;",
            "    scan(tail...);",
            "}",
            "",
            "template<class T>",
            "void print(const T &t) { cout << t << '\\n'; }",
            "",
            "template<class Head, class... Tail>",
            "void print(const Head &head, const Tail &... tail) {",
            "    cout << head << ' ';",
            "    print(tail...);",
            "}",
            "",
            "template<class... T>",
            "void fin(const T &... a) {",
            "    print(a...);",
            "    exit(0);",
            "}",
            "",
            "template<class T>",
            "vector <T> &operator+=(vector <T> &v, T x) {",
            "    for (T &t: v) t += x;",
            "    return v;",
            "}",
            "",
            "template<class T>",
            "vector <T> &operator-=(vector <T> &v, T x) {",
            "    for (T &t: v) t -= x;",
            "    return v;",
            "}",
            "",
            "template<class T>",
            "vector <T> &operator*=(vector <T> &v, T x) {",
            "    for (T &t: v) t *= x;",
            "    return v;",
            "}",
            "",
            "template<class T>",
            "vector <T> &operator/=(vector <T> &v, T x) {",
            "    for (T &t: v) t /= x;",
            "    return v;",
            "}",
            "",
            "struct Init_io {",
            "    Init_io() {",
            "        ios::sync_with_stdio(false);",
            "        cin.tie(nullptr);",
            "        cout.tie(nullptr);",
            "        cout << boolalpha << fixed << setprecision(15);",
            "        cerr << boolalpha << fixed << setprecision(15);",
            "    }",
            "} init_io;",
            "",
            "const string yes[] = {\"no\", \"yes\"};",
            "const string Yes[] = {\"No\", \"Yes\"};",
            "const string YES[] = {\"NO\", \"YES\"};",
            "const int inf = 1001001001;",
            "const ll linf = 1001001001001001001;",
            "",
            "void rearrange(const vi &) {}",
            "",
            "template<class T, class... Tail>",
            "void rearrange(const vi &ord, vector <T> &head, Tail &...tail) {",
            "    assert(ord.size() == head.size());",
            "    vector <T> ori = head;",
            "    rep(i, ord.size()) head[i] = ori[ord[i]];",
            "    rearrange(ord, tail...);",
            "}",
            "",
            "template<class T, class... Tail>",
            "void sort_by(vector <T> &head, Tail &... tail) {",
            "    vi ord(head.size());",
            "    iota(all(ord), 0);",
            "    sort(all(ord), [&](int i, int j) { return head[i] < head[j]; });",
            "    rearrange(ord, head, tail...);",
            "}",
            "",
            "template<class T, class S>",
            "vector <T> cumsum(const vector <S> &v, bool shift_one = true) {",
            "    int n = v.size();",
            "    vector <T> res;",
            "    if (shift_one) {",
            "        res.resize(n + 1);",
            "        rep(i, n) res[i + 1] = res[i] + v[i];",
            "    } else {",
            "        res.resize(n);",
            "        if (n) {",
            "            res[0] = v[0];",
            "            rep(i, 1, n) res[i] = res[i - 1] + v[i];",
            "        }",
            "    }",
            "    return res;",
            "}",
            "",
            "vvi graph(int n, int m, bool directed = false, int origin = 1) {",
            "    vvi G(n);",
            "    rep(_, m) {",
            "        INT(u, v);",
            "        u -= origin, v -= origin;",
            "        G[u].pb(v);",
            "        if (!directed) G[v].pb(u);",
            "    }",
            "    return G;",
            "}",
            "",
            "template<class T>",
            "vector <vector<pair < int, T>>>",
            "",
            "weighted_graph(int n, int m, bool directed = false, int origin = 1) {",
            "    vector < vector < pair < int, T>>> G(n);",
            "    rep(_, m) {",
            "        int u, v;",
            "        T w;",
            "        scan(u, v, w);",
            "        u -= origin, v -= origin;",
            "        G[u].eb(v, w);",
            "        if (!directed) G[v].eb(u, w);",
            "    }",
            "    return G;",
            "}",
            "",
            "",
            "int main() {",
            "",
            "}",
        ],
        "description": ""
    },

	"aurora": {
        "prefix": "aurora",
        "body": [
            "#include<bits/stdc++.h>",
            "using namespace std;",
            "using ll = long long;",
            "#define rep(i,n) for(ll i=0;i<ll(n);i++)",
            "#define rep2(i,m,n) for(ll i=ll(m);i<ll(n);i++)",
            "using vl = vector<ll>;",
            "using vvl = vector<vl>;",
            "using vvvl = vector<vvl>;",
            "using pl = pair<ll,ll>;",
            "using vpl = vector<pl>;",
            "using vvpl = vector<vpl>;",
            "#define pb push_back",
            "",
            "const long double EPS = 0.0000000001;",
            "const ll INF = 1000000000000000000;",
            "const double pi = std::acos(-1.0);",
            "",
            "__int128 read_int128(){ //__int128を入力する",
            "  string S;",
            "  cin >> S;",
            "  int N = S.size();",
            "  int st = 0;",
            "  bool minus = false;",
            "  if(S[0] == '-'){",
            "    minus = true;",
            "    st = 1;",
            "  }",
            "  __int128 res = 0;",
            "  rep2(i,st,N) res = res*10+int(S[i]-'0');",
            "  if(minus) res *= -1;",
            "  return res;",
            "}",
            "",
            "std::ostream &operator<<(std::ostream &dest, __int128_t value) { //これでcoutで__int128を出力できるように",
            "  std::ostream::sentry s(dest);",
            "  if (s) {",
            "    __uint128_t tmp = value < 0 ? -value : value;",
            "    char buffer[128];",
            "    char *d = std::end(buffer);",
            "    do {",
            "      --d;",
            "      *d = \"0123456789\"[tmp % 10];",
            "      tmp /= 10;",
            "    } while (tmp != 0);",
            "    if (value < 0) {",
            "      --d;",
            "      *d = '-';",
            "    }",
            "    int len = std::end(buffer) - d;",
            "    if (dest.rdbuf()->sputn(d, len) != len) {",
            "      dest.setstate(std::ios_base::badbit);",
            "    }",
            "  }",
            "  return dest;",
            "}",
            "",
            "void Yes(){ cout << \"Yes\" << endl; } //文字列\"Yes\"を標準出力",
            "void No(){ cout << \"No\" << endl; } //文字列\"No\"を標準出力",
            "",
            "int main(){",
            "  ",
            "}",
        ],
        "description": ""
    },


	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}